// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PendingMember {
  id        String @id @default(uuid())
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String @unique
  password  String
  token     String @unique

  @@map("pending_members")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]

  @@map("roles")
}

model User {
  id        String  @id @default(uuid())
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  imageUri  String? @map("image_uri")
  email     String  @unique
  password  String
  roleId    String  @map("role_id")
  role      Role    @relation(fields: [roleId], references: [id])
  admin     Admin?
  member    Member?

  @@map("users")
}

model Member {
  id             String          @id @map("user_id")
  user           User            @relation(fields: [id], references: [id], onDelete: Cascade)
  comments       Comment[]
  hostedEvents   Event[]
  attendedEvents EventAttendee[]

  @@map("members")
}

model Admin {
  id   String @id @map("user_id")
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  events Event[]

  @@map("categories")
}

model Event {
  id             String          @id @default(uuid())
  title          String          @unique
  address        String
  description    String
  lat            Float
  lng            Float
  spent          Float
  imageUri       String          @map("image_uri")
  startDate      DateTime        @map("start_date")
  endDate        DateTime        @map("end_date")
  createdAt      DateTime        @default(now()) @map("created_at")
  gallery        String[]
  hostId         String          @map("host_id")
  host           Member          @relation(fields: [hostId], references: [id])
  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     String          @map("category_id")
  comments       Comment[]
  eventAttendees EventAttendee[]

  @@map("events")
}

model EventAttendee {
  eventId  String
  memberId String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([eventId, memberId])
  @@map("event_attendees")
}

model Comment {
  id       String   @id @default(uuid())
  title    String
  text     String
  postedAt DateTime @default(now()) @map("posted_at")
  eventId  String   @map("event_id")
  memberId String   @map("member_id")
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("comments")
}
